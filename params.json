{"name":"Korben","tagline":"IndexedDB should be easy","body":"Korben\r\n======\r\n[Source Code] (public/javascripts/korben.js)\r\n \r\nLibrary for simplifying access to IndexedDB.\r\n\r\nIndexedDB is a power data store that runs within the context of the browser. Many browsers support it: Chrome, FireFox, and IE 10 with hopes that Safari will support it soon. \r\n\r\nIndexedDB allows for a richer applications on the client by enabling the data to be stored on the client. Moving data to the client has 3 primary benefits.\r\n* Better performance than server side calls.\r\n* Off-load work from the server to the client.\r\n* With offline caching (HTML5 feature) you can have a fully disconnected application.\r\n\r\n# Why Korben? \r\nI was trying to use IndexedDB in a very simple application and I found it's API awkward to use. With IndexedDB I felt like it required a lot of setup and teardown ot make the calls I wanted, which were pretty basic.\r\n\r\n#Why call it Korben? \r\nIt is the name of my dog, no good reason :)\r\n\r\n#Any dependencies?\r\n\r\nJQuery, Korben uses JQuery's deferred library. [JQuery Deferred] (http://api.jquery.com/category/deferred-object/)\r\n\r\n#Are there any unit tests?\r\n\r\nOf course there are (or is it 'is'?). To run the unit tests you will need to have something running that can host the files. I use [node] (http://nodejs.org/) for that. You could host the unit tests in any web server, but it must be a web server. IndexedDB will not work against a file:// based path.\r\n\r\nAt the time of this writting there are 22 unit tests, all passing. To run them (as I do) fire up node (node app.js). Then navigate to localhost:3000. That will run all the unit tests. \r\n\r\nUnit tests are contained in two JavaScript files. \r\n* [smoke tests] (public/javascripts/smoketests.js)\r\n* [error tests] (public/javascripts/errortests.js)\r\n\r\nUnit tests were written using [QUnit] (http://qunitjs.com/).\r\n\r\n#License?\r\nMIT\r\n\r\n#How to use?\r\n\r\nKorben has a pretty simple API. Things such as putting a record into IndexedDB is very simple. The API often makes use of JQuery's deferred class.\r\n\r\n## Put / Get Example\r\n\r\n```javascript\r\n\r\n\t// First we will setup a record to insert.\r\n\tvar id = UUID.generate();\r\n\tvar note = {id: id, title: \"a title\", date: new Date()};\r\n\t\r\n\t// Next we must open the database.\r\n\tvar db = Korben.db(initFunction, \"SomeNotes\");\r\n\t// Then open the store.\r\n\tvar store = db.store(\"notes\");\r\n\r\n\t// Once we have a valid store we can put records into the store.\r\n\t// put / get return a JQuery deferred object. Call then to wait\r\n\t// for the operation to complete.\r\n\tstore.put(note).then(function() {\r\n\t\t// Get takes a single parameter, the id of the record to find.\r\n\t\tstore.get(id).then(function(loaded) {\r\n\t\t\t// then will be called once record is loaded.\r\n\t\t\t// If record is not found loaded will be null.\r\n\t\t\tok(loaded.id === note.id);\r\n\t\t\tstart();\r\n\t\t});\r\n\t});\r\n\r\n\r\n```\r\n\r\n## What is initFunction in the previous demo? \r\nHow dare you try and sneak that past me!\r\n\r\nWhen creating your database you need to provide a JavaScript object that will be loaded to creaet / initialize the database.\r\n\r\n```javascript\r\n\r\n// The init object is required to initialize your IndexedDB database.\r\n// Your init object must contain a version property version: 4 below.\r\n// Your init object must also have an update function.\r\nvar initFunction = {\t\t\t\r\n\t\r\n\t// Schema version of the database.\r\n\tversion: 4,\r\n\t\r\n\t// This function will be called when an upgrade of the database is required.\r\n\t// You will have to write something like this function for your database.\r\n\t// The event passed is an IndexedDB object, on that object you will have to\r\n\t// create the object stores you intend to create.\r\n\tupgrade: function(event) {\r\n\t\tdb = event.target.result;\r\n\r\n\t\tif (event.oldVersion < 1) {\r\n\t\t\t// If we are just getting started lets create a 'notes' store for unit testing.\r\n\t\t\tvar notesStore = db.createObjectStore(\"notes\", { keyPath: \"id\" });\r\n\t\t\tnotesStore.createIndex(\"date\", \"date\", { unique: false });\r\n\t\t}\t   \r\n\t\tif (event.oldVersion < 2) {\r\n\t\t\t// Add an integer store for unit testing.\r\n\t\t\tvar intidStore = db.createObjectStore(\"intid\", { keyPath: \"id\" });\t\t\t\r\n\t\t}\t   \r\n\r\n\t\tif (event.oldVersion < 3) {\r\n\t\t\t// Add a integer range store for unit testing.\r\n\t\t\tvar intRangeStore = db.createObjectStore(\"intrange\", { keyPath: \"id\" });\r\n\t\t\tintRangeStore.createIndex(\"intColumn\", \"intColumn\", { unique: false });\r\n\t\t}\t   \r\n\t}\r\n}\r\n\r\n```\r\n\r\n# Where is the library?\r\n\r\n[Source Code] (public/javascripts/korben.js)\r\n\r\n# Helpful links about IndexedDB\r\n\r\nhttps://developer.mozilla.org/en-US/docs/IndexedDB\r\nhttp://www.w3.org/TR/IndexedDB/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}