<!DOCTYPE html>
<html>



<body>

<div id="qunit"></div>
<div id="qunit-fixture"></div>

<script src="libs/jquery.js"></script>
<link rel="stylesheet" href="libs/qunit.css">
<script src="libs/jqunit.js"></script>

<script src="javascripts/guid.js"></script>  
<script src="javascripts/korben.js"></script>  

<script>

// From: https://developer.mozilla.org/en-US/docs/IndexedDB/Using_IndexedDB
// In the following line, you should include the prefixes of implementations you want to test.
window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
// DON'T use "var indexedDB = ..." if you're not in a function.
// Moreover, you may need references to some window.IDB* objects:
window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;
window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange
// (Mozilla has never prefixed these objects, so we don't need window.mozIDB*)

if (!window.indexedDB) {
    window.alert("Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.")
}

function initFunction(event) {			
	db = event.target.result;

	if (event.oldVersion <= 1) {
		var notesStore = db.createObjectStore("notes", { keyPath: "id" });
		notesStore.createIndex("date", "date", { unique: false });
	}	   
	if (event.oldVersion <= 2) {
		var intidStore = db.createObjectStore("intid", { keyPath: "id" });			
	}	   
}

asyncTest(" get / put ", function() {

	var id = UUID.generate();
	var note = {id: id, title: "a title", date: new Date()};
	
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.put(note).then(function() {
		store.get(id).then(function(loaded) {
			ok(loaded.id === note.id);
			start();
		});
	});
	
	expect(1);
});

asyncTest(" get / put (int id)", function() {

	var id = 1;
	var note = {id: id, title: "a title", date: new Date()};
	
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.clear().then(function() {
		store.put(note).then(function() {
			store.get(id).then(function(loaded) {
				ok(loaded.id === note.id);
				start();
			});
		});
	});
	
	expect(1);
});

asyncTest(" get no record ", function() {

	var id = UUID.generate();
	var note = {id: id, title: "a title", date: new Date()};
	
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.get(id).then(function(loaded) {
		ok(loaded === null);
		start();
	});
	
	expect(1);
});

asyncTest(" update record ", function() {

	var id = UUID.generate();
	var note = {id: id, title: "a title", date: new Date()};
	
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.put(note).then(function() {		
		store.get(id).then(function(loaded) {
			loaded.title = "poop";
			store.put(loaded).then(function() {					
				store.get(id).then(function(loaded2) {
					ok(loaded2.title === "poop");
					start();
				});	
			});
		});
	});
	
	expect(1);
});

asyncTest(" getAll ", function() {

	var id = UUID.generate();
	var note = {id: id, title: "a title", date: new Date()};
	
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.put(note).then(function() {
		store.getAll().then(function(loaded) {
			ok(loaded.length > 0);
			start();
		});
	});
	
	expect(1);
});

asyncTest(" getAll by Index ", function() {

	var id = UUID.generate();
	var note = {id: id, title: "a title", date: new Date()};
	
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.put(note).then(function() {
		store.getAll("date").then(function(loaded) {
			ok(loaded.length > 0);
			start();
		});
	});
	
	expect(1);
});

asyncTest(" for each range (contains item)", function() {

	var id = UUID.generate();
	var note = {id: id, title: "a title", date: new Date(2013, 1, 2)};
	
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.clear().then(function() {
		store.put(note).then(function() {
			store.forEachRange("date", new Date(2013, 1, 1), new Date(2013, 1, 3), 
				function(key, primaryKey) {
					if (key != null) {
						ok(key != null);					
						ok(primaryKey === id);
						start();
					}
				}
			);
		});
	});	
	
	expect(2);
});

asyncTest(" for each range (get item)", function() {

	function initFunction(event) {			
		db = event.target.result;

		 if (event.oldVersion <= 1) {
			var notesStore = db.createObjectStore("notes", { keyPath: "id" });
			notesStore.createIndex("date", "date", { unique: false });
		}	   
	}

	var id = UUID.generate();
	var note = {id: id, title: "a title", date: new Date(2013, 1, 2)};
	
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.clear().then(function() {
		store.put(note).then(function() {
			store.forEachRange("date", new Date(2013, 1, 1), new Date(2013, 1, 3), 
				function(key, primaryKey) {
					if (key !== null) {
						store.get(primaryKey).then(function(item) {
							ok(item !== null);
							ok(item.id === id);
							ok(item.title == note.title);
							start();
						});
					}
				}				
			);
		});
	});	
	
	expect(3);
});

asyncTest(" for each range (does NOT contain item)", function() {

	function initFunction(event) {			
		db = event.target.result;

		 if (event.oldVersion <= 1) {
			var notesStore = db.createObjectStore("notes", { keyPath: "id" });
			notesStore.createIndex("date", "date", { unique: false });
		}	   
	}

	var id = UUID.generate();
	var note = {id: id, title: "a title", date: new Date(2012, 1, 2)};
	
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.clear().then(function() {
		store.put(note).then(function() {
			store.forEachRange("date", new Date(2013, 1, 1), new Date(2013, 1, 3), 
				function(key, primaryKey) {
					if (key === null) {
						ok(key === null);
						start();
					}
					else
						ok(key !== null); // this will blow up if data returned
				}
			);
		});
	});	
	
	expect(1);
});

asyncTest(" count 1 ", function() {

	var id = UUID.generate();
	var note = {id: id, title: "a title", date: new Date()};
	
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.removeAll().then(function() {
		store.put(note).then(function() {
			store.count().then(function(count) {
				ok(count === 1);
				start();
			});
		});
	});
	
	expect(1);
});

asyncTest(" count 2 ", function() {

	var id = UUID.generate();
	var note = {id: id, title: "a title", date: new Date()};
	var id2 = UUID.generate();
	var note2 = {id: id2, title: "a title", date: new Date()};
		
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.removeAll().then(function() {
		store.put(note).then(function() {
			store.put(note2).then(function() {
				store.count().then(function(count) {
					ok(count === 2);
					start();
				});	
			});
		});
	});
	
	expect(1);
});

asyncTest(" clear ", function() {

	var id = UUID.generate();
	var note = {id: id, title: "a title", date: new Date()};
	
	var db = Korben.db(initFunction, "SomeNotes");
	var store = db.store("notes");

	store.clear().then(function() {
		store.put(note).then(function() {
			store.count().then(function(count) {
				ok(count === 1);
				start();
			});
		});
	});
	
	expect(1);
});

</script>

</body>


</html>
